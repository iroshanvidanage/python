---
# author    https://github.com/iroshanvidanage
# date      08/18/2024


stages:
  - test
  - build
  - deploy_staging
  - release_test
  - deploy_production


variables:
  PYTHON_IMAGE: python:3.8.0-slim
  DOCKER_IMAGE: docker:latest
  # this image tag will only create a tagged image from the branch which will hinder the rollbacks
  # IMAGE_TAG: $CI_REGISTRY_IMAGE/employee-image:$CI_COMMIT_REF_SLUG
  # hence using the short_sha variable for having unique image ids for each environment
  IMAGE_TAG: $CI_REGISTRY_IMAGE/employee-image:$CI_COMMIT_SHORT_SHA
  STAGING_APP: [app_in_heroku]
  PRODUCTION_APP: [app_in_heroku]
  FEATURE_APP: ${CI_ENVIRONMENT_SLUG}
  HEROKU_STAGING: "registry.heroku.com/$STAGING_APP/web"
  HEROKU_PRODUCTION: "registry.heroku.com/$PRODUCTION_APP/web"
  HEROKU_FEATURE: "registry.heroku.com/$FEATURE_APP/web"


# image: python:3.8.0-slim

lint_test:
  image: $PYTHON_IMAGE
  stage: test
  before-script:
    - pip3 install flake8-html -y
  script:
    - flake8 --format=html --htmldir=flake_reports/
  artifacts:
    when: always # to store reports even if the job fails
    paths:
      - flake_reports/
    expire_in: "2 days"


pytest:
  image: $PYTHON_IMAGE
  stage: test
  before-script:
    - pip3 install pytest-html
    - pip3 install -r requirements.txt
  script:
    - pytest --html=pytest_reports/pytest_report.html --self-contained-html
  artifacts:
    when: always
    paths:
      - pytest_reports/


build:
  image: $DOCKER_IMAGE
  services:
    - docker:dind
  stage: build
  before-script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG .
    - docker images
    - docker push $IMAGE_TAG


deploy_feature:
  image: $DOCKER_IMAGE
  services:
    - docker:dind
  stage: deploy_feature
  environment:
    name: feature
    url: https://$FEATURE_APP.herokuapp.com/
  before-script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - ducker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $HEROKU_FEATURE
    - docker login -u _ -p $HEROKU_FEATURE_API_KEY registry.heroku.com
    - docker push $HEROKU_FEATURE
    # Can add the following codes or add another job for the releasing app to heroku
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_FEATURE_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $FEATURE_APP
    - echo "App deployed to staging server at https://$FEATURE_APP.herokuapp.com/"


deploy_staging:
  image: $DOCKER_IMAGE
  services:
    - docker:dind
  stage: deploy_staging
  environment:
    name: staging
    url: https://$STAGING_APP.herokuapp.com/
  before-script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - ducker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $HEROKU_STAGING
    - docker login -u _ -p $HEROKU_STAGING_API_KEY registry.heroku.com
    - docker push $HEROKU_STAGING
    # Can add the following codes or add another job for the releasing app to heroku
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_STAGING_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $STAGING_APP
    - echo "App deployed to staging server at https://$STAGING_APP.herokuapp.com/"


# the following job can be added additionally for heroku release
release_staging:
  image: node:latest
  stage: deploy_staging
  before-script:
    - npm install -g heroku
  script:
    - HEROKU_API_KEY=$HEROKU_STAGING_API_KEY heroku container:release web --app $STAGING_APP
    - echo "App deployed to staging server at https://$STAGING_APP.herokuapp.com/"
  need:
    - job: deploy_staging
      artifacts: false
  when: manual


release_test:
  image: alpine:latest
  stage: release_test
  before-script:
    - apk --no-cache add curl
  script:
    - curl https://$STAGING_APP.herokuapp.com/ | grep "Employee Data"


deploy_production:
  only:
    - main
  rules:
    - if: $CI_COMMIT_TAG =~ /^APP_NAME/ # regular expression for the app release tag
  image: $DOCKER_IMAGE
  services:
    - docker:dind
  stage: deploy_production
  environment:
    name: production
    url: https://$PRODUCTION_APP.herokuapp.com/
  before-script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - ducker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $HEROKU_PRODUCTION
    - docker login -u _ -p $HEROKU_PRODUCTION_API_KEY registry.heroku.com
    - docker push $HEROKU_PRODUCTION
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_PRODUCTION_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $PRODUCTION_APP
    - echo "App deployed to production server at https://$PRODUCTION_APP.herokuapp.com/"
